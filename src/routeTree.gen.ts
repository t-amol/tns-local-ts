/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as OrdersIndexImport } from './routes/orders/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as OrdersShipmentsImport } from './routes/orders/shipments'
import { Route as OrdersReturnsImport } from './routes/orders/returns'
import { Route as DashboardSettingsImport } from './routes/dashboard/settings'
import { Route as DashboardProductsImport } from './routes/dashboard/products'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminRolesImport } from './routes/admin/roles'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const OrdersShipmentsRoute = OrdersShipmentsImport.update({
  id: '/orders/shipments',
  path: '/orders/shipments',
  getParentRoute: () => rootRoute,
} as any)

const OrdersReturnsRoute = OrdersReturnsImport.update({
  id: '/orders/returns',
  path: '/orders/returns',
  getParentRoute: () => rootRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardProductsRoute = DashboardProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRoute,
} as any)

const AdminRolesRoute = AdminRolesImport.update({
  id: '/admin/roles',
  path: '/admin/roles',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/roles': {
      id: '/admin/roles'
      path: '/admin/roles'
      fullPath: '/admin/roles'
      preLoaderRoute: typeof AdminRolesImport
      parentRoute: typeof rootRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/products': {
      id: '/dashboard/products'
      path: '/products'
      fullPath: '/dashboard/products'
      preLoaderRoute: typeof DashboardProductsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/orders/returns': {
      id: '/orders/returns'
      path: '/orders/returns'
      fullPath: '/orders/returns'
      preLoaderRoute: typeof OrdersReturnsImport
      parentRoute: typeof rootRoute
    }
    '/orders/shipments': {
      id: '/orders/shipments'
      path: '/orders/shipments'
      fullPath: '/orders/shipments'
      preLoaderRoute: typeof OrdersShipmentsImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardProductsRoute: typeof DashboardProductsRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardProductsRoute: DashboardProductsRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/roles': typeof AdminRolesRoute
  '/admin/users': typeof AdminUsersRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/orders/returns': typeof OrdersReturnsRoute
  '/orders/shipments': typeof OrdersShipmentsRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/orders': typeof OrdersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/roles': typeof AdminRolesRoute
  '/admin/users': typeof AdminUsersRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/orders/returns': typeof OrdersReturnsRoute
  '/orders/shipments': typeof OrdersShipmentsRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/orders': typeof OrdersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/roles': typeof AdminRolesRoute
  '/admin/users': typeof AdminUsersRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/orders/returns': typeof OrdersReturnsRoute
  '/orders/shipments': typeof OrdersShipmentsRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/orders/': typeof OrdersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/admin/roles'
    | '/admin/users'
    | '/dashboard/products'
    | '/dashboard/settings'
    | '/orders/returns'
    | '/orders/shipments'
    | '/admin'
    | '/dashboard/'
    | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/roles'
    | '/admin/users'
    | '/dashboard/products'
    | '/dashboard/settings'
    | '/orders/returns'
    | '/orders/shipments'
    | '/admin'
    | '/dashboard'
    | '/orders'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/admin/roles'
    | '/admin/users'
    | '/dashboard/products'
    | '/dashboard/settings'
    | '/orders/returns'
    | '/orders/shipments'
    | '/admin/'
    | '/dashboard/'
    | '/orders/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  AdminRolesRoute: typeof AdminRolesRoute
  AdminUsersRoute: typeof AdminUsersRoute
  OrdersReturnsRoute: typeof OrdersReturnsRoute
  OrdersShipmentsRoute: typeof OrdersShipmentsRoute
  AdminIndexRoute: typeof AdminIndexRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  AdminRolesRoute: AdminRolesRoute,
  AdminUsersRoute: AdminUsersRoute,
  OrdersReturnsRoute: OrdersReturnsRoute,
  OrdersShipmentsRoute: OrdersShipmentsRoute,
  AdminIndexRoute: AdminIndexRoute,
  OrdersIndexRoute: OrdersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login",
        "/admin/roles",
        "/admin/users",
        "/orders/returns",
        "/orders/shipments",
        "/admin/",
        "/orders/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/products",
        "/dashboard/settings",
        "/dashboard/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/roles": {
      "filePath": "admin/roles.tsx"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx"
    },
    "/dashboard/products": {
      "filePath": "dashboard/products.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings.tsx",
      "parent": "/dashboard"
    },
    "/orders/returns": {
      "filePath": "orders/returns.tsx"
    },
    "/orders/shipments": {
      "filePath": "orders/shipments.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/orders/": {
      "filePath": "orders/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
